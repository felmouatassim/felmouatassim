




/*
 * This is a generated file. Do not edit this file.
 */
package sample.examples.audit.providers;

import java.util.*;
import java.util.zip.CRC32;
import weblogic.descriptor.*;
import weblogic.descriptor.BeanUpdateEvent.PropertyUpdate;
import weblogic.descriptor.internal.*;
import weblogic.descriptor.internal.ReferenceManager.Resolver;
import weblogic.descriptor.beangen.LegalChecks;
import weblogic.descriptor.beangen.StringHelper;
import weblogic.utils.ArrayUtils;
import weblogic.utils.Debug;
import weblogic.utils.collections.ArrayIterator;
import weblogic.utils.collections.CombinedIterator;
import weblogic.descriptor.internal.Munger.ReaderEventInfo;

import weblogic.management.commo.RequiredModelMBeanWrapper;


/**
 * Corresponds to SimpleSampleAuditorMBean
 * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean)
 * @author Copyright (c) 2003 by BEA Systems Inc. All Rights Reserved.
 * @version 0.1
 *
 * No description provided.
 *
 * @xsdgen:complexType.typeName simple-sample-auditorType
 * @xsdgen:complexType.targetNamespace http://xmlns.oracle.com/oracleas/schema/11/adf/sampleapp/weblogic/providers
 * @xsdgen:complexType.rootElement simple-sample-auditor
 */
public class SimpleSampleAuditorMBeanImpl
  extends weblogic.management.security.audit.AuditorMBeanImpl
  implements SimpleSampleAuditorMBean, java.io.Serializable
{
  private String[] _ActiveContextHandlerEntries;
  private String _CompatibilityObjectName;
  private String _Description;
  private Boolean _Enabled;
  private String _LogFileName;
  private Integer _LogSizeLimit;
  private Integer _MaxNumberLogFiles;
  private String _Name;
  private String _ProviderClassName;
  private weblogic.management.security.RealmMBean _Realm;
  private String[] _SupportedContextHandlerEntries;
  private String _Version;
  private SimpleSampleAuditorImpl _customizer;

  /**
   * 
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=SimpleSampleAuditorMBeanImpl)
   *
   */
  public SimpleSampleAuditorMBeanImpl() {
    super();
    _initializeRootBean(getDescriptor());
    try {
      _customizer = new sample.examples.audit.providers.SimpleSampleAuditorImpl(new RequiredModelMBeanWrapper(this));
    } catch (Exception e) {
      if (e instanceof RuntimeException)
        throw (RuntimeException)e;
      throw new java.lang.reflect.UndeclaredThrowableException(e);
    }
    _initializeProperty(-1);
  }

  /**
   * 
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=SimpleSampleAuditorMBeanImpl)
   *
   */
  public SimpleSampleAuditorMBeanImpl(weblogic.descriptor.DescriptorBean param0, int param1) {
    super(param0, param1);
    _initializeRootBean(getDescriptor());
    try {
      _customizer = new sample.examples.audit.providers.SimpleSampleAuditorImpl(new RequiredModelMBeanWrapper(this));
    } catch (Exception e) {
      if (e instanceof RuntimeException)
        throw (RuntimeException)e;
      throw new java.lang.reflect.UndeclaredThrowableException(e);
    }
    _initializeProperty(-1);
  }

  /**
   * No description provided.
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=getProviderClassName)
   *
   * @xsdgen:element.exclude
   * @transient
   */
  public String getProviderClassName() {
    return _ProviderClassName;
  }

  /**
   * No description provided.
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=getSupportedContextHandlerEntries)
   *
   * @xsdgen:element.exclude
   * @transient
   */
  public String[] getSupportedContextHandlerEntries() {
    return _SupportedContextHandlerEntries;
  }

  /**
   * 
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=isProviderClassNameSet)
   *
   * @xsdgen:isSetMethodFor provider-class-name
   */
  public boolean isProviderClassNameSet() {
    return _isSet(2);
  }

  /**
   * 
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=isSupportedContextHandlerEntriesSet)
   *
   * @xsdgen:isSetMethodFor supported-context-handler-entry
   */
  public boolean isSupportedContextHandlerEntriesSet() {
    return _isSet(8);
  }

  /**
   * 
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=setProviderClassName)
   *
   */
  public void setProviderClassName(String param0)
    throws javax.management.InvalidAttributeValueException
  {
    _ProviderClassName = param0;
  }

  /**
   * 
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=setSupportedContextHandlerEntries)
   *
   */
  public void setSupportedContextHandlerEntries(String[] param0)
    throws javax.management.InvalidAttributeValueException
  {
    param0 = (param0 == null) ? new String[0] : param0;
    _getHelper()._ensureNonNullElements(param0);
    _SupportedContextHandlerEntries = param0;
  }

  /**
   * Returns the ContextHandler entries that the Audit provider is currently
 configured to process.
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=getActiveContextHandlerEntries)
   *
   * @xsdgen:element.name active-context-handler-entry
   * @xsdgen:element.required false
   * @xsdgen:element.nillable true
   * @dynamic false
   */
  public String[] getActiveContextHandlerEntries() {
    return _ActiveContextHandlerEntries;
  }

  /**
   * No description provided.
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=getDescription)
   *
   * @xsdgen:element.exclude
   * @transient
   */
  public String getDescription() {
    return _Description;
  }

  /**
   * 
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=isActiveContextHandlerEntriesSet)
   *
   * @xsdgen:isSetMethodFor active-context-handler-entry
   */
  public boolean isActiveContextHandlerEntriesSet() {
    return _isSet(9);
  }

  /**
   * 
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=isDescriptionSet)
   *
   * @xsdgen:isSetMethodFor description
   */
  public boolean isDescriptionSet() {
    return _isSet(3);
  }

  /**
   * 
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=setDescription)
   *
   */
  public void setDescription(String param0)
    throws javax.management.InvalidAttributeValueException
  {
    _Description = param0;
  }

  /**
   * No description provided.
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=getVersion)
   *
   * @xsdgen:element.exclude
   * @transient
   */
  public String getVersion() {
    return _Version;
  }

  /**
   * 
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=isVersionSet)
   *
   * @xsdgen:isSetMethodFor version
   */
  public boolean isVersionSet() {
    return _isSet(4);
  }

  /**
   * Sets the ContextHandler entries that the Audit provider will process.
 Only entries from the Audit provider's <code>SupportedContextHandlerEntries</code>
 attribute may be specified.
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=setActiveContextHandlerEntries)
   *
   */
  public void setActiveContextHandlerEntries(String[] param0)
    throws javax.management.InvalidAttributeValueException
  {
    param0 = (param0 == null) ? new String[0] : param0;
    param0 = _getHelper()._trimElements(param0);
    String[] _oldVal = _ActiveContextHandlerEntries;
    _ActiveContextHandlerEntries = param0;
    _postSet(9, _oldVal, param0);
  }

  /**
   * 
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=setVersion)
   *
   */
  public void setVersion(String param0)
    throws javax.management.InvalidAttributeValueException
  {
    _Version = param0;
  }

  /**
   * Returns the realm that contains this security provider.
 Returns null if this security provider is not contained by a realm.
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=getRealm)
   *
   * @xsdgen:element.exclude
   * @transient
   */
  public weblogic.management.security.RealmMBean getRealm() {
    return _customizer.getRealm();
  }

  /**
   * 
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=isRealmSet)
   *
   * @xsdgen:isSetMethodFor realm
   */
  public boolean isRealmSet() {
    return _isSet(5);
  }

  /**
   * 
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=setRealm)
   *
   */
  public void setRealm(weblogic.management.security.RealmMBean param0)
    throws javax.management.InvalidAttributeValueException
  {
    _Realm = param0;
  }

  /**
   * No description provided.
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=getLogFileName)
   *
   * @xsdgen:element.name log-file-name
   * @xsdgen:element.required false
   * @xsdgen:element.nillable true
   * @xsdgen:element.default SimpleSampleAuditor.log
   * @dynamic false
   */
  public String getLogFileName() {
    return _LogFileName;
  }

  /**
   * 
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=getName)
   *
   * @xsdgen:element.name name
   * @xsdgen:element.required false
   * @xsdgen:element.nillable true
   * @xsdgen:element.default SimpleSampleAuditor
   * @dynamic false
   */
  public String getName() {
    return _Name;
  }

  /**
   * 
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=isLogFileNameSet)
   *
   * @xsdgen:isSetMethodFor log-file-name
   */
  public boolean isLogFileNameSet() {
    return _isSet(10);
  }

  /**
   * 
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=isNameSet)
   *
   * @xsdgen:isSetMethodFor name
   */
  public boolean isNameSet() {
    return _isSet(6);
  }

  /**
   * No description provided.
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=setLogFileName)
   *
   */
  public void setLogFileName(String param0)
    throws javax.management.InvalidAttributeValueException
  {
    String _oldVal = _LogFileName;
    _LogFileName = param0;
    _postSet(10, _oldVal, param0);
  }

  /**
   * 
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=setName)
   *
   */
  public void setName(String param0)
    throws javax.management.InvalidAttributeValueException
  {
    param0 = (param0 == null) ? null : param0.trim();
    String _oldVal = _Name;
    _Name = param0;
    _postSet(6, _oldVal, param0);
  }

  /**
   * 
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=getCompatibilityObjectName)
   *
   * @xsdgen:element.name compatibility-object-name
   * @xsdgen:element.required false
   * @xsdgen:element.nillable true
   * @dynamic false
   */
  public String getCompatibilityObjectName() {
    return _customizer.getCompatibilityObjectName();
  }

  /**
   * No description provided.
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=getEnabled)
   *
   * @xsdgen:element.name enabled
   * @xsdgen:element.required false
   * @xsdgen:element.nillable true
   * @dynamic false
   */
  public Boolean getEnabled() {
    return _Enabled;
  }

  /**
   * 
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=isCompatibilityObjectNameSet)
   *
   * @xsdgen:isSetMethodFor compatibility-object-name
   */
  public boolean isCompatibilityObjectNameSet() {
    return _isSet(7);
  }

  /**
   * 
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=isEnabledSet)
   *
   * @xsdgen:isSetMethodFor enabled
   */
  public boolean isEnabledSet() {
    return _isSet(11);
  }

  /**
   * 
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=setCompatibilityObjectName)
   *
   */
  public void setCompatibilityObjectName(String param0)
    throws javax.management.InvalidAttributeValueException
  {
    param0 = (param0 == null) ? null : param0.trim();
    String _oldVal = _CompatibilityObjectName;
    _CompatibilityObjectName = param0;
    _postSet(7, _oldVal, param0);
  }

  /**
   * No description provided.
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=setEnabled)
   *
   */
  public void setEnabled(Boolean param0)
    throws javax.management.InvalidAttributeValueException
  {
    Boolean _oldVal = _Enabled;
    _Enabled = param0;
    _postSet(11, _oldVal, param0);
  }

  /**
   * No description provided.
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=getLogSizeLimit)
   *
   * @xsdgen:element.name log-size-limit
   * @xsdgen:element.required false
   * @xsdgen:element.nillable true
   * @dynamic false
   */
  public Integer getLogSizeLimit() {
    return _LogSizeLimit;
  }

  /**
   * 
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=isLogSizeLimitSet)
   *
   * @xsdgen:isSetMethodFor log-size-limit
   */
  public boolean isLogSizeLimitSet() {
    return _isSet(12);
  }

  /**
   * No description provided.
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=setLogSizeLimit)
   *
   */
  public void setLogSizeLimit(Integer param0)
    throws javax.management.InvalidAttributeValueException
  {
    Integer _oldVal = _LogSizeLimit;
    _LogSizeLimit = param0;
    _postSet(12, _oldVal, param0);
  }

  /**
   * No description provided.
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=getMaxNumberLogFiles)
   *
   * @xsdgen:element.name max-number-log-files
   * @xsdgen:element.required false
   * @xsdgen:element.nillable true
   * @dynamic false
   */
  public Integer getMaxNumberLogFiles() {
    return _MaxNumberLogFiles;
  }

  /**
   * 
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=isMaxNumberLogFilesSet)
   *
   * @xsdgen:isSetMethodFor max-number-log-files
   */
  public boolean isMaxNumberLogFilesSet() {
    return _isSet(13);
  }

  /**
   * No description provided.
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=setMaxNumberLogFiles)
   *
   */
  public void setMaxNumberLogFiles(Integer param0)
    throws javax.management.InvalidAttributeValueException
  {
    Integer _oldVal = _MaxNumberLogFiles;
    _MaxNumberLogFiles = param0;
    _postSet(13, _oldVal, param0);
  }

  /**
   * 
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=_getKey)
   *
   */
  public Object _getKey() {
    return super._getKey();
  }

  /**
   * 
   * (Interface=sample.examples.audit.providers.SimpleSampleAuditorMBean Attribute=_validate)
   *
   */
  public void _validate()
    throws IllegalArgumentException
  {
    super._validate();
    try { if (!(_customizer.validateActiveContextHandlerEntries(getActiveContextHandlerEntries()))) throw new IllegalArgumentException("The ContextHandler ActiveContextHandlerEntries attribute was set to an illegal value."); } catch (javax.management.InvalidAttributeValueException e) { throw new IllegalArgumentException(e.toString()); };
  }



 





  protected void _unSet(int idx) {
    if (!_initializeProperty(idx)) {
      super._unSet(idx);
    } else {
      _markSet(idx, false);
    }
  }


  /**
   * @return new instance of helper
   */
  protected AbstractDescriptorBeanHelper _createHelper() {
    return new Helper(this);
  }

  /**
   * @return true if any property is set
   */
  public boolean _isAnythingSet() {
    return super._isAnythingSet()
      ;
  }



  /**
   * @return true if property initialized, false idx refers to a property
   * handled by superclass
   */
  private boolean _initializeProperty(int idx) {
    boolean initOne = idx > -1;
    if (!initOne) {
      idx = 9;
    }
    try {
      switch (idx) {
      case 9:
        _ActiveContextHandlerEntries = new String[]{};
        if (initOne) break;
      case 7:
        _CompatibilityObjectName = null;
        if (initOne) break;
      case 3:
        _Description = "WebLogic Simple Sample Audit Provider";
        if (initOne) break;
      case 11:
        _Enabled = false;
        if (initOne) break;
      case 10:
        _LogFileName = "SimpleSampleAuditor.log";
        if (initOne) break;
      case 12:
        _LogSizeLimit = 1024000;
        if (initOne) break;
      case 13:
        _MaxNumberLogFiles = 10;
        if (initOne) break;
      case 6:
        _Name = "SimpleSampleAuditor";
        if (initOne) break;
      case 2:
        _ProviderClassName = "sample.examples.audit.providers.SimpleSampleAuditProviderImpl";
        if (initOne) break;
      case 5:
        _Realm = null;
        if (initOne) break;
      case 8:
        _SupportedContextHandlerEntries = new String[] { "com.bea.contextelement.channel.Address","com.bea.contextelement.channel.ChannelName","com.bea.contextelement.channel.Port","com.bea.contextelement.channel.Protocol","com.bea.contextelement.channel.PublicAddress","com.bea.contextelement.channel.PublicPort","com.bea.contextelement.channel.RemoteAddress","com.bea.contextelement.channel.RemotePort","com.bea.contextelement.channel.Secure","com.bea.contextelement.ejb20.Parameter","com.bea.contextelement.entitlement.EAuxiliaryID","com.bea.contextelement.jmx.AuditProtectedArgInfo","com.bea.contextelement.jmx.ObjectName","com.bea.contextelement.jmx.OldAttributeValue","com.bea.contextelement.jmx.Parameters","com.bea.contextelement.jmx.ShortName","com.bea.contextelement.jmx.Signature","com.bea.contextelement.saml.MessageSignerCertificate","com.bea.contextelement.saml.SSLClientCertificateChain","com.bea.contextelement.saml.subject.ConfirmationMethod","com.bea.contextelement.saml.subject.dom.KeyInfo","com.bea.contextelement.security.ChainPrevailidatedBySSL","com.bea.contextelement.servlet.HttpServletRequest","com.bea.contextelement.servlet.HttpServletResponse","com.bea.contextelement.webservice.Integrity","com.bea.contextelement.wli.Message","com.bea.contextelement.wsee.SOAPMessage","com.bea.contextelement.xml.SecurityToken","com.bea.contextelement.xml.SecurityTokenAssertion" };
        if (initOne) break;
      case 4:
        _Version = "1.0";
        if (initOne) break;
      default:
        if (initOne) return false;
      }
      return true;
    } catch (RuntimeException e) {
      throw e;
    } catch (Exception e) {
      throw (Error)new AssertionError("Impossible Exception").initCause(e);
    }
  }


  /**
   * This helper class contains methods that are used infrequently and
   * can be easily separated from the bean implementations.  It is loaded
   * on demand to minimize memory usage.
   *
   * @xsdgen:complexType.exclude
   */
  protected static class Helper
    extends weblogic.management.security.audit.AuditorMBeanImpl.Helper
  {
    private SimpleSampleAuditorMBeanImpl bean;

    protected Helper(SimpleSampleAuditorMBeanImpl bean) {
      super(bean);
      this.bean = bean;
    }

    /**
     * @return property name indexed by propIndex.
     */
    public String getPropertyName(int propIndex) {
      switch (propIndex) {
      case 9: return "ActiveContextHandlerEntries";
      case 7: return "CompatibilityObjectName";
      case 3: return "Description";
      case 11: return "Enabled";
      case 10: return "LogFileName";
      case 12: return "LogSizeLimit";
      case 13: return "MaxNumberLogFiles";
      case 6: return "Name";
      case 2: return "ProviderClassName";
      case 5: return "Realm";
      case 8: return "SupportedContextHandlerEntries";
      case 4: return "Version";
      default: return super.getPropertyName(propIndex);
      }
    }


    /**
     * @return property index of propName.
     */
    public int getPropertyIndex(String propName) {
      if (false) return -1;
      else if (propName.equals("ActiveContextHandlerEntries")) return 9;
      else if (propName.equals("CompatibilityObjectName")) return 7;
      else if (propName.equals("Description")) return 3;
      else if (propName.equals("Enabled")) return 11;
      else if (propName.equals("LogFileName")) return 10;
      else if (propName.equals("LogSizeLimit")) return 12;
      else if (propName.equals("MaxNumberLogFiles")) return 13;
      else if (propName.equals("Name")) return 6;
      else if (propName.equals("ProviderClassName")) return 2;
      else if (propName.equals("Realm")) return 5;
      else if (propName.equals("SupportedContextHandlerEntries")) return 8;
      else if (propName.equals("Version")) return 4;
      else return super.getPropertyIndex(propName);
    }

    /**
     * @return iterator over all children
     */
    public Iterator getChildren() {
      List iterators = new ArrayList();
      return new CombinedIterator(iterators);
    }

    /**
     * Compute hash value for version helper
     */
    protected long computeHashValue(CRC32 crc) {
      try {
        StringBuffer buf = new StringBuffer();
        long superValue = super.computeHashValue(crc);
        if (superValue != 0) {
          buf.append(String.valueOf(superValue));
        }

        long childValue = 0;
        if (bean.isActiveContextHandlerEntriesSet()){
          buf.append("ActiveContextHandlerEntries");
          buf.append(Arrays.toString(ArrayUtils.copyAndSort(bean.getActiveContextHandlerEntries())));
        }
        if (bean.isCompatibilityObjectNameSet()){
          buf.append("CompatibilityObjectName");
          buf.append(String.valueOf(bean.getCompatibilityObjectName()));
        }
        if (bean.isDescriptionSet()){
          buf.append("Description");
          buf.append(String.valueOf(bean.getDescription()));
        }
        if (bean.isEnabledSet()){
          buf.append("Enabled");
          buf.append(String.valueOf(bean.getEnabled()));
        }
        if (bean.isLogFileNameSet()){
          buf.append("LogFileName");
          buf.append(String.valueOf(bean.getLogFileName()));
        }
        if (bean.isLogSizeLimitSet()){
          buf.append("LogSizeLimit");
          buf.append(String.valueOf(bean.getLogSizeLimit()));
        }
        if (bean.isMaxNumberLogFilesSet()){
          buf.append("MaxNumberLogFiles");
          buf.append(String.valueOf(bean.getMaxNumberLogFiles()));
        }
        if (bean.isNameSet()){
          buf.append("Name");
          buf.append(String.valueOf(bean.getName()));
        }
        if (bean.isProviderClassNameSet()){
          buf.append("ProviderClassName");
          buf.append(String.valueOf(bean.getProviderClassName()));
        }
        if (bean.isRealmSet()){
          buf.append("Realm");
          buf.append(String.valueOf(bean.getRealm()));
        }
        if (bean.isSupportedContextHandlerEntriesSet()){
          buf.append("SupportedContextHandlerEntries");
          buf.append(Arrays.toString(ArrayUtils.copyAndSort(bean.getSupportedContextHandlerEntries())));
        }
        if (bean.isVersionSet()){
          buf.append("Version");
          buf.append(String.valueOf(bean.getVersion()));
        }
        crc.update(buf.toString().getBytes());
        return crc.getValue();
      } catch (Exception e) {
        throw (Error)new AssertionError("Impossible Exception").initCause(e);
      }
    }


    /**
     * Compute difference between this and other
     */
    protected void computeDiff(AbstractDescriptorBean other) {
      try {
        super.computeDiff(other);
      SimpleSampleAuditorMBeanImpl otherTyped = (SimpleSampleAuditorMBeanImpl)other;
      computeDiff("ActiveContextHandlerEntries", bean.getActiveContextHandlerEntries(), otherTyped.getActiveContextHandlerEntries(), false);
      computeDiff("CompatibilityObjectName", bean.getCompatibilityObjectName(), otherTyped.getCompatibilityObjectName(), false);
      computeDiff("Enabled", bean.getEnabled(), otherTyped.getEnabled(), false);
      computeDiff("LogFileName", bean.getLogFileName(), otherTyped.getLogFileName(), false);
      computeDiff("LogSizeLimit", bean.getLogSizeLimit(), otherTyped.getLogSizeLimit(), false);
      computeDiff("MaxNumberLogFiles", bean.getMaxNumberLogFiles(), otherTyped.getMaxNumberLogFiles(), false);
      computeDiff("Name", bean.getName(), otherTyped.getName(), false);
      } catch (Exception e) {
        throw (Error)new AssertionError("Impossible Exception").initCause(e);
      }
    }

    protected void applyPropertyUpdate(BeanUpdateEvent event, PropertyUpdate update) {
      try {
        SimpleSampleAuditorMBeanImpl original = (SimpleSampleAuditorMBeanImpl)event.getSourceBean();
        SimpleSampleAuditorMBeanImpl proposed = (SimpleSampleAuditorMBeanImpl)event.getProposedBean();
        String prop = update.getPropertyName();
        int type = update.getUpdateType();
        if (update.isDerivedUpdate()) {
          return;
        }
        if (prop.equals("ActiveContextHandlerEntries")) {
          original.setActiveContextHandlerEntries(proposed.getActiveContextHandlerEntries());
          original._conditionalUnset(update.isUnsetUpdate(), 9);
        } else
        if (prop.equals("CompatibilityObjectName")) {
          original._conditionalUnset(update.isUnsetUpdate(), 7);
        } else
        if (prop.equals("Description")) {
        } else
        if (prop.equals("Enabled")) {
          original.setEnabled(proposed.getEnabled());
          original._conditionalUnset(update.isUnsetUpdate(), 11);
        } else
        if (prop.equals("LogFileName")) {
          original.setLogFileName(proposed.getLogFileName());
          original._conditionalUnset(update.isUnsetUpdate(), 10);
        } else
        if (prop.equals("LogSizeLimit")) {
          original.setLogSizeLimit(proposed.getLogSizeLimit());
          original._conditionalUnset(update.isUnsetUpdate(), 12);
        } else
        if (prop.equals("MaxNumberLogFiles")) {
          original.setMaxNumberLogFiles(proposed.getMaxNumberLogFiles());
          original._conditionalUnset(update.isUnsetUpdate(), 13);
        } else
        if (prop.equals("Name")) {
          original.setName(proposed.getName());
          original._conditionalUnset(update.isUnsetUpdate(), 6);
        } else
        if (prop.equals("ProviderClassName")) {
        } else
        if (prop.equals("Realm")) {
        } else
        if (prop.equals("SupportedContextHandlerEntries")) {
        } else
        if (prop.equals("Version")) {
        } else
        {
          super.applyPropertyUpdate(event, update);
        }
      // FIXME ehalpern - hack to handle cases where setters throw
      // javax.management.InvalidAttributeValueException.
      } catch (RuntimeException e) {
        throw e;
      } catch (Exception e) {
        throw (Error)new AssertionError("Impossible Exception").initCause(e);
      }
    }

    protected AbstractDescriptorBean finishCopy(
    AbstractDescriptorBean initialCopy, boolean includeObsolete, List excludeProps
    ) {
      Object o;
      try {
        SimpleSampleAuditorMBeanImpl copy = (SimpleSampleAuditorMBeanImpl)initialCopy;
        super.finishCopy(copy, includeObsolete, excludeProps);
        if ((excludeProps == null || !excludeProps.contains("ActiveContextHandlerEntries")) && bean.isActiveContextHandlerEntriesSet()) {
          o = bean.getActiveContextHandlerEntries();
          copy.setActiveContextHandlerEntries((o == null) ? null : (String[])((String[])o).clone());
        }
        if ((excludeProps == null || !excludeProps.contains("CompatibilityObjectName")) && bean.isCompatibilityObjectNameSet()) {
        }
        if ((excludeProps == null || !excludeProps.contains("Enabled")) && bean.isEnabledSet()) {
          copy.setEnabled((Boolean)bean.getEnabled());
        }
        if ((excludeProps == null || !excludeProps.contains("LogFileName")) && bean.isLogFileNameSet()) {
          copy.setLogFileName((String)bean.getLogFileName());
        }
        if ((excludeProps == null || !excludeProps.contains("LogSizeLimit")) && bean.isLogSizeLimitSet()) {
          copy.setLogSizeLimit((Integer)bean.getLogSizeLimit());
        }
        if ((excludeProps == null || !excludeProps.contains("MaxNumberLogFiles")) && bean.isMaxNumberLogFilesSet()) {
          copy.setMaxNumberLogFiles((Integer)bean.getMaxNumberLogFiles());
        }
        if ((excludeProps == null || !excludeProps.contains("Name")) && bean.isNameSet()) {
          copy.setName((String)bean.getName());
        }
        return copy;
      // FIXME ehalpern - hack to handle cases where setters throw
      // javax.management.InvalidAttributeValueException.
      } catch (RuntimeException e) {
        throw e;
      } catch (Exception e) {
        throw (Error)new AssertionError("Impossible Exception").initCause(e);
      }
    }

    protected void inferSubTree(Class clazz, Object annotation) {
    	super.inferSubTree(clazz, annotation);
    	Object currentAnnotation = null;
                            		inferSubTree(bean.getRealm(), clazz, annotation);
             }
  }


  // FIXME ec@weblogic.com 01-Feb-05 -- no longer used. Remove when ADB method is removed
  public weblogic.descriptor.internal.Munger.SchemaHelper _getSchemaHelper() {
    return null;
  }

  // FIXME ec@weblogic.com 01-Feb-05 -- remove
  public String _getElementName(int propIndex) {
    return _getSchemaHelper2().getElementName(propIndex);
  }


  protected String getTargetNamespace() {
    return "http://xmlns.oracle.com/oracleas/schema/11/adf/sampleapp/weblogic/providers";
  }

  private static SchemaHelper2 _schemaHelper;
  public weblogic.descriptor.internal.SchemaHelper _getSchemaHelper2() {
    if (_schemaHelper == null)
	_schemaHelper = new SchemaHelper2();
    return _schemaHelper;
  }

   // new schema helper
  /**
   * @xsdgen:complexType.exclude
   */
  public static class SchemaHelper2
   extends weblogic.descriptor.internal.AbstractSchemaHelper2
   implements weblogic.descriptor.internal.SchemaHelper
  {
    public int getPropertyIndex(String s) {
      switch(s.length()) {
      case 28:
        if (false) return -1;
        else if (s.equals("active-context-handler-entry"))
          return 9;
        break;
      case 25:
        if (false) return -1;
        else if (s.equals("compatibility-object-name"))
          return 7;
        break;
      case 11:
        if (false) return -1;
        else if (s.equals("description"))
          return 3;
        break;
      case 7:
        if (false) return -1;
        else if (s.equals("enabled"))
          return 11;
        else if (s.equals("version"))
          return 4;
        break;
      case 13:
        if (false) return -1;
        else if (s.equals("log-file-name"))
          return 10;
        break;
      case 14:
        if (false) return -1;
        else if (s.equals("log-size-limit"))
          return 12;
        break;
      case 20:
        if (false) return -1;
        else if (s.equals("max-number-log-files"))
          return 13;
        break;
      case 4:
        if (false) return -1;
        else if (s.equals("name"))
          return 6;
        break;
      case 19:
        if (false) return -1;
        else if (s.equals("provider-class-name"))
          return 2;
        break;
      case 5:
        if (false) return -1;
        else if (s.equals("realm"))
          return 5;
        break;
      case 31:
        if (false) return -1;
        else if (s.equals("supported-context-handler-entry"))
          return 8;
        break;
      default:
        break;
      }
      return super.getPropertyIndex(s);
    }

    public weblogic.descriptor.internal.SchemaHelper getSchemaHelper(int propIndex) {
      switch(propIndex) {
      default:
        return super.getSchemaHelper(propIndex);
      }
    }


    public String getRootElementName() {
      return "simple-sample-auditorm";
    }

    public String getElementName(int propIndex) {
      switch (propIndex) {
        case 9: return "active-context-handler-entry";
        case 7: return "compatibility-object-name";
        case 3: return "description";
        case 11: return "enabled";
        case 10: return "log-file-name";
        case 12: return "log-size-limit";
        case 13: return "max-number-log-files";
        case 6: return "name";
        case 2: return "provider-class-name";
        case 5: return "realm";
        case 8: return "supported-context-handler-entry";
        case 4: return "version";
        default: return super.getElementName(propIndex);
      }
    }


    public boolean isArray(int propIndex) {
      switch(propIndex) {
      case 9:
        return true;
      case 8:
        return true;
      default:
        return super.isArray(propIndex);
      }
    }




    public boolean isBean(int propIndex) {
      switch(propIndex) {
      default:
        return super.isBean(propIndex);
      }
    }










  }




  public String wls_getInterfaceClassName() {
    return "sample.examples.audit.providers.SimpleSampleAuditorMBean"; 
  }

}
