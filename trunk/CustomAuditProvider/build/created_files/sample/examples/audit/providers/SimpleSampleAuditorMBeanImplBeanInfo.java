













/*
 * This is a generated file. Do not edit this file!
 */

package sample.examples.audit.providers;

import java.util.Map;
import java.beans.BeanInfo;

import java.beans.BeanDescriptor;
import java.beans.MethodDescriptor;
import java.beans.PropertyDescriptor;
import java.beans.ParameterDescriptor;
import java.beans.EventSetDescriptor;
import java.beans.IntrospectionException;

import weblogic.management.internal.mbean.BeanInfoBinder;
import weblogic.management.internal.mbean.BeanInfoImpl;
import weblogic.management.internal.mbean.BeanInfoHelper;

import weblogic.management.commo.RequiredModelMBeanWrapper;

import sample.examples.audit.providers.SimpleSampleAuditorMBean;

/**
 * Generated on Sun Sep 15 21:35:49 WAT 2013
 * @copyright Copyright (c) 2003 by BEA Systems Inc.  All Rights Reserved.
 * @author Copyright (c) 2003 by BEA Systems Inc. All Rights Reserved.
 * @version 0.1
 */
public class SimpleSampleAuditorMBeanImplBeanInfo
  extends weblogic.management.security.audit.AuditorMBeanImplBeanInfo
{

  public SimpleSampleAuditorMBeanImplBeanInfo(boolean readOnly, String targetVersion)
      throws IntrospectionException {
    super(readOnly, targetVersion);
  }
  // constructor
  public SimpleSampleAuditorMBeanImplBeanInfo()
    throws IntrospectionException {

  }


  public static Class INTERFACE_CLASS = sample.examples.audit.providers.SimpleSampleAuditorMBean.class;


  protected BeanDescriptor buildBeanDescriptor() {

    Class beanClass = null;
    try {
      beanClass = SimpleSampleAuditorMBeanImpl.class;
    } catch (Throwable ignore) {
      beanClass = INTERFACE_CLASS;
    }
    
    BeanDescriptor beanDescriptor =
      new BeanDescriptor(  beanClass, null /*customizer*/ );

    beanDescriptor.setValue("dynamic",Boolean.TRUE);
     beanDescriptor.setValue("package","sample.examples.audit.providers");
    String description = new String(
          
           "No description provided. " +  ""    ).intern();
    beanDescriptor.setShortDescription(description);
    beanDescriptor.setValue("description", description);
    beanDescriptor.setValue("interfaceclassname",  "sample.examples.audit.providers.SimpleSampleAuditorMBean");
    beanDescriptor.setValue("generatedByWLSInfoBinder", Boolean.TRUE);

    return beanDescriptor;
  }

  /**
   * Get the attribute infos for this class and all of it parent
   * classes combined.
   *
   * @param descriptors the set to add you descriptors to.
   */
  protected void buildPropertyDescriptors( Map descriptors )
         throws IntrospectionException {
    PropertyDescriptor currentResult = null;
    // PROPERTY ActiveContextHandlerEntries
    {
    if ( !descriptors.containsKey("ActiveContextHandlerEntries"))
    {
      String getterName = "getActiveContextHandlerEntries";
      String setterName = null;
      if (!readOnly)
        setterName = "setActiveContextHandlerEntries";
      currentResult =
        new PropertyDescriptor( "ActiveContextHandlerEntries",
             sample.examples.audit.providers.SimpleSampleAuditorMBean.class,
             getterName,
             setterName);
      descriptors.put( "ActiveContextHandlerEntries", currentResult );
      currentResult.setValue("description",     
           "Returns the ContextHandler entries that the Audit provider is currently " + 
           "configured to process. " +  "");
         currentResult.setValue("dynamic", Boolean.FALSE);
 
    }
    }
    // PROPERTY Description
    {
    if ( !descriptors.containsKey("Description"))
    {
      String getterName = "getDescription";
      String setterName = null;
      currentResult =
        new PropertyDescriptor( "Description",
             sample.examples.audit.providers.SimpleSampleAuditorMBean.class,
             getterName,
             setterName);
      descriptors.put( "Description", currentResult );
      currentResult.setValue("description",     
           "No description provided. " +  "");
 // default = "WebLogic Simple Sample Audit Provider"
     setPropertyDescriptorDefault(currentResult, "WebLogic Simple Sample Audit Provider");
        currentResult.setValue("dynamic", Boolean.FALSE);
 
    }
    }
    // PROPERTY Enabled
    {
    if ( !descriptors.containsKey("Enabled"))
    {
      String getterName = "getEnabled";
      String setterName = null;
      if (!readOnly)
        setterName = "setEnabled";
      currentResult =
        new PropertyDescriptor( "Enabled",
             sample.examples.audit.providers.SimpleSampleAuditorMBean.class,
             getterName,
             setterName);
      descriptors.put( "Enabled", currentResult );
      currentResult.setValue("description",     
           "No description provided. " +  "");
 // default = false
     setPropertyDescriptorDefault(currentResult, false);
        currentResult.setValue("dynamic", Boolean.FALSE);
 
    }
    }
    // PROPERTY LogFileName
    {
    if ( !descriptors.containsKey("LogFileName"))
    {
      String getterName = "getLogFileName";
      String setterName = null;
      if (!readOnly)
        setterName = "setLogFileName";
      currentResult =
        new PropertyDescriptor( "LogFileName",
             sample.examples.audit.providers.SimpleSampleAuditorMBean.class,
             getterName,
             setterName);
      descriptors.put( "LogFileName", currentResult );
      currentResult.setValue("description",     
           "No description provided. " +  "");
 // default = "SimpleSampleAuditor.log"
     setPropertyDescriptorDefault(currentResult, "SimpleSampleAuditor.log");
        currentResult.setValue("dynamic", Boolean.FALSE);
 
    }
    }
    // PROPERTY LogSizeLimit
    {
    if ( !descriptors.containsKey("LogSizeLimit"))
    {
      String getterName = "getLogSizeLimit";
      String setterName = null;
      if (!readOnly)
        setterName = "setLogSizeLimit";
      currentResult =
        new PropertyDescriptor( "LogSizeLimit",
             sample.examples.audit.providers.SimpleSampleAuditorMBean.class,
             getterName,
             setterName);
      descriptors.put( "LogSizeLimit", currentResult );
      currentResult.setValue("description",     
           "No description provided. " +  "");
 // default = 1024000
     setPropertyDescriptorDefault(currentResult, 1024000);
        currentResult.setValue("dynamic", Boolean.FALSE);
 
    }
    }
    // PROPERTY MaxNumberLogFiles
    {
    if ( !descriptors.containsKey("MaxNumberLogFiles"))
    {
      String getterName = "getMaxNumberLogFiles";
      String setterName = null;
      if (!readOnly)
        setterName = "setMaxNumberLogFiles";
      currentResult =
        new PropertyDescriptor( "MaxNumberLogFiles",
             sample.examples.audit.providers.SimpleSampleAuditorMBean.class,
             getterName,
             setterName);
      descriptors.put( "MaxNumberLogFiles", currentResult );
      currentResult.setValue("description",     
           "No description provided. " +  "");
 // default = 10
     setPropertyDescriptorDefault(currentResult, 10);
        currentResult.setValue("dynamic", Boolean.FALSE);
 
    }
    }
    // PROPERTY Name
    {
    if ( !descriptors.containsKey("Name"))
    {
      String getterName = "getName";
      String setterName = null;
      currentResult =
        new PropertyDescriptor( "Name",
             sample.examples.audit.providers.SimpleSampleAuditorMBean.class,
             getterName,
             setterName);
      descriptors.put( "Name", currentResult );
      currentResult.setValue("description",     
           " " +  "");
 // default = "SimpleSampleAuditor"
     setPropertyDescriptorDefault(currentResult, "SimpleSampleAuditor");
        currentResult.setValue("dynamic", Boolean.FALSE);
 
    }
    }
    // PROPERTY ProviderClassName
    {
    if ( !descriptors.containsKey("ProviderClassName"))
    {
      String getterName = "getProviderClassName";
      String setterName = null;
      currentResult =
        new PropertyDescriptor( "ProviderClassName",
             sample.examples.audit.providers.SimpleSampleAuditorMBean.class,
             getterName,
             setterName);
      descriptors.put( "ProviderClassName", currentResult );
      currentResult.setValue("description",     
           "No description provided. " +  "");
 // default = "sample.examples.audit.providers.SimpleSampleAuditProviderImpl"
     setPropertyDescriptorDefault(currentResult, "sample.examples.audit.providers.SimpleSampleAuditProviderImpl");
        currentResult.setValue("dynamic", Boolean.FALSE);
 
    }
    }
    // PROPERTY Realm
    {
    if ( !descriptors.containsKey("Realm"))
    {
      String getterName = "getRealm";
      String setterName = null;
      currentResult =
        new PropertyDescriptor( "Realm",
             sample.examples.audit.providers.SimpleSampleAuditorMBean.class,
             getterName,
             setterName);
      descriptors.put( "Realm", currentResult );
      currentResult.setValue("description",     
           "Returns the realm that contains this security provider. " + 
           "Returns null if this security provider is not contained by a realm. " +  "");
      currentResult.setValue("relationship", "reference");
         currentResult.setValue("transient", Boolean.TRUE);
     currentResult.setValue("dynamic", Boolean.FALSE);
 
    }
    }
    // PROPERTY SupportedContextHandlerEntries
    {
    if ( !descriptors.containsKey("SupportedContextHandlerEntries"))
    {
      String getterName = "getSupportedContextHandlerEntries";
      String setterName = null;
      currentResult =
        new PropertyDescriptor( "SupportedContextHandlerEntries",
             sample.examples.audit.providers.SimpleSampleAuditorMBean.class,
             getterName,
             setterName);
      descriptors.put( "SupportedContextHandlerEntries", currentResult );
      currentResult.setValue("description",     
           "No description provided. " +  "");
 // default = "com.bea.contextelement.channel.Address","com.bea.contextelement.channel.ChannelName","com.bea.contextelement.channel.Port","com.bea.contextelement.channel.Protocol","com.bea.contextelement.channel.PublicAddress","com.bea.contextelement.channel.PublicPort","com.bea.contextelement.channel.RemoteAddress","com.bea.contextelement.channel.RemotePort","com.bea.contextelement.channel.Secure","com.bea.contextelement.ejb20.Parameter","com.bea.contextelement.entitlement.EAuxiliaryID","com.bea.contextelement.jmx.AuditProtectedArgInfo","com.bea.contextelement.jmx.ObjectName","com.bea.contextelement.jmx.OldAttributeValue","com.bea.contextelement.jmx.Parameters","com.bea.contextelement.jmx.ShortName","com.bea.contextelement.jmx.Signature","com.bea.contextelement.saml.MessageSignerCertificate","com.bea.contextelement.saml.SSLClientCertificateChain","com.bea.contextelement.saml.subject.ConfirmationMethod","com.bea.contextelement.saml.subject.dom.KeyInfo","com.bea.contextelement.security.ChainPrevailidatedBySSL","com.bea.contextelement.servlet.HttpServletRequest","com.bea.contextelement.servlet.HttpServletResponse","com.bea.contextelement.webservice.Integrity","com.bea.contextelement.wli.Message","com.bea.contextelement.wsee.SOAPMessage","com.bea.contextelement.xml.SecurityToken","com.bea.contextelement.xml.SecurityTokenAssertion"
     currentResult.setValue("default", new String[]{"com.bea.contextelement.channel.Address","com.bea.contextelement.channel.ChannelName","com.bea.contextelement.channel.Port","com.bea.contextelement.channel.Protocol","com.bea.contextelement.channel.PublicAddress","com.bea.contextelement.channel.PublicPort","com.bea.contextelement.channel.RemoteAddress","com.bea.contextelement.channel.RemotePort","com.bea.contextelement.channel.Secure","com.bea.contextelement.ejb20.Parameter","com.bea.contextelement.entitlement.EAuxiliaryID","com.bea.contextelement.jmx.AuditProtectedArgInfo","com.bea.contextelement.jmx.ObjectName","com.bea.contextelement.jmx.OldAttributeValue","com.bea.contextelement.jmx.Parameters","com.bea.contextelement.jmx.ShortName","com.bea.contextelement.jmx.Signature","com.bea.contextelement.saml.MessageSignerCertificate","com.bea.contextelement.saml.SSLClientCertificateChain","com.bea.contextelement.saml.subject.ConfirmationMethod","com.bea.contextelement.saml.subject.dom.KeyInfo","com.bea.contextelement.security.ChainPrevailidatedBySSL","com.bea.contextelement.servlet.HttpServletRequest","com.bea.contextelement.servlet.HttpServletResponse","com.bea.contextelement.webservice.Integrity","com.bea.contextelement.wli.Message","com.bea.contextelement.wsee.SOAPMessage","com.bea.contextelement.xml.SecurityToken","com.bea.contextelement.xml.SecurityTokenAssertion"});
        currentResult.setValue("dynamic", Boolean.FALSE);
 
    }
    }
    // PROPERTY Version
    {
    if ( !descriptors.containsKey("Version"))
    {
      String getterName = "getVersion";
      String setterName = null;
      currentResult =
        new PropertyDescriptor( "Version",
             sample.examples.audit.providers.SimpleSampleAuditorMBean.class,
             getterName,
             setterName);
      descriptors.put( "Version", currentResult );
      currentResult.setValue("description",     
           "No description provided. " +  "");
 // default = "1.0"
     setPropertyDescriptorDefault(currentResult, "1.0");
        currentResult.setValue("dynamic", Boolean.FALSE);
 
    }
    }
    super.buildPropertyDescriptors( descriptors );
  }


  /**
   * Get the method infos for a subset of the overall methods types.
   *
   */
  private void fillinFactoryMethodInfos( Map descriptors )
         throws IntrospectionException,
                java.lang.NoSuchMethodException {

    MethodDescriptor currentResult;

  }

  /**
   * Get the method infos for a subset of the overall methods types.
   *
   */
  private void fillinCollectionMethodInfos( Map descriptors )
         throws IntrospectionException,
                java.lang.NoSuchMethodException {

    MethodDescriptor currentResult;

  }

  /**
   * Get the method infos for a subset of the overall methods types.
   *
   */
  private void fillinFinderMethodInfos( Map descriptors )
         throws IntrospectionException,
                java.lang.NoSuchMethodException {

    MethodDescriptor currentResult;

  }

  /**
   * Get the method infos for a subset of the overall methods types.
   *
   */
  private void fillinOperationMethodInfos( Map descriptors )
         throws IntrospectionException,
                java.lang.NoSuchMethodException {

    MethodDescriptor currentResult;

  }

  /**
   * Get the method infos for this class and all of it parent
   * classes combined.
   *
   * @param descriptors the set to add to.
   */
  protected void buildMethodDescriptors( Map descriptors )
         throws IntrospectionException,
                java.lang.NoSuchMethodException {

    fillinFinderMethodInfos(descriptors);
    if ( !readOnly ) {
      fillinCollectionMethodInfos(descriptors);
      fillinFactoryMethodInfos(descriptors);
    }
    fillinOperationMethodInfos(descriptors);
     super.buildMethodDescriptors(descriptors);
  }

  /**
    * Get the event infos for this class and all of it parent
    * classes combined.
    *
    * @param descriptors the set to add to.
    */
  protected void buildEventSetDescriptors(  Map descriptors )
       throws IntrospectionException {
    // TODO: this is not yet implemented
  }
}
