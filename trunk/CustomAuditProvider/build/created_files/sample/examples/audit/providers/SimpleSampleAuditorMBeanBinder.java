/*
 * This is a generated file. Do not edit this file.
 */
package sample.examples.audit.providers;

import javax.management.InvalidAttributeValueException;
import javax.management.InvalidAttributeValueException;
import weblogic.descriptor.DescriptorBean;
import weblogic.management.DistributedManagementException;
import weblogic.management.internal.mbean.ReadOnlyMBeanBinder;
import weblogic.utils.codegen.AttributeBinder;
import weblogic.descriptor.internal.AbstractDescriptorBean;

/**
 * Generated on Sun Sep 15 21:35:48 WAT 2013
 * @copyright Copyright (c) 2003 by BEA Systems Inc.  All Rights Reserved.
 * @author Copyright (c) 2003 by BEA Systems Inc. All Rights Reserved.
 * @version 0.1
 */
public class SimpleSampleAuditorMBeanBinder
  extends weblogic.management.security.audit.AuditorMBeanBinder
  implements AttributeBinder
{
  private SimpleSampleAuditorMBeanImpl bean;

  protected SimpleSampleAuditorMBeanBinder(DescriptorBean bean) {
    super(bean);
    // FIXME ehalpern@bea.com 21-Aug-03 -- Don't hard-code suffix
    this.bean = (SimpleSampleAuditorMBeanImpl)bean;       
  }

  public SimpleSampleAuditorMBeanBinder() {
    // FIXME ehalpern@bea.com 21-Aug-03 -- Don't hard-code suffix
    super(new SimpleSampleAuditorMBeanImpl());
    bean = (SimpleSampleAuditorMBeanImpl)getBean();
  }

  public AttributeBinder bindAttribute(String name, Object value)
    throws IllegalArgumentException
  {
    try {
      AttributeBinder binder = this;
      if ( !(binder instanceof weblogic.management.internal.mbean.SecurityReadOnlyMBeanBinder) &&
          (value != null && value.toString().trim().length() == 0 )) {
        return binder;       
      }     
      

      if (name == null) {
        // ignore

      } else if (name.equals("ActiveContextHandlerEntries")) {
                        
	    try {
          bean.setActiveContextHandlerEntries(parseStringArrayInitializer((String)value));
        } catch (weblogic.descriptor.BeanAlreadyExistsException e) {
    // CR197646 and CR193589
          System.out.println("Warning: multiple definitions with same name: "+e.getMessage());
                
          
        }
      } else if (name.equals("CompatibilityObjectName")) {
                        
	        throw new AssertionError("can't set read-only property CompatibilityObjectName");
      } else if (name.equals("Enabled")) {
                        
	    try {
          bean.setEnabled(new Boolean((String)value));
        } catch (weblogic.descriptor.BeanAlreadyExistsException e) {
    // CR197646 and CR193589
          System.out.println("Warning: multiple definitions with same name: "+e.getMessage());
                
          
        }
      } else if (name.equals("LogFileName")) {
                        
	    try {
          bean.setLogFileName(((java.lang.String)value));
        } catch (weblogic.descriptor.BeanAlreadyExistsException e) {
    // CR197646 and CR193589
          System.out.println("Warning: multiple definitions with same name: "+e.getMessage());
                
          
        }
      } else if (name.equals("LogSizeLimit")) {
                        
	    try {
          bean.setLogSizeLimit(new Integer((String)value));
        } catch (weblogic.descriptor.BeanAlreadyExistsException e) {
    // CR197646 and CR193589
          System.out.println("Warning: multiple definitions with same name: "+e.getMessage());
                
          
        }
      } else if (name.equals("MaxNumberLogFiles")) {
                        
	    try {
          bean.setMaxNumberLogFiles(new Integer((String)value));
        } catch (weblogic.descriptor.BeanAlreadyExistsException e) {
    // CR197646 and CR193589
          System.out.println("Warning: multiple definitions with same name: "+e.getMessage());
                
          
        }
      } else if (name.equals("Name")) {
                        
	    try {
          bean.setName(((java.lang.String)value));
        } catch (weblogic.descriptor.BeanAlreadyExistsException e) {
    // CR197646 and CR193589
          System.out.println("Warning: multiple definitions with same name: "+e.getMessage());
                
          
        }
      } else {
        binder = super.bindAttribute(name, value);
      }
      return binder;
    } catch (ClassCastException e) {
      System.out.println(e + " name: " + name + " class: " + value.getClass().getName());
      throw e;
    } catch (RuntimeException e) {
      throw e;
    } catch (Exception e) {
      if (e instanceof DistributedManagementException) {
        throw new AssertionError("impossible exception: " + e);
      } else if (e instanceof InvalidAttributeValueException) {
        throw new IllegalArgumentException(e.getMessage());
      } else {
        throw new AssertionError("unexpected exception: " + e);
      }
    }
  }
}
